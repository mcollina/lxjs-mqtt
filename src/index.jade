doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Web-Enabling things with MQTT

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel="stylesheet", type='text/css', href="bower_components/font-awesome/css/font-awesome.min.css")
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1 Web-Enabling things with MQTT
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>

      section(data-camera)
        h1 Camera Test

      section
        h1 Let's go fullscreen!

      section(data-camera="fullscreen")
        h1 You should not see this!

      section.full-imgs
        img(src="images/mqttorg.svg")

      section(data-camera)
        h2 Controlling an LCD

        form.disabled
          input#lcd(type="text")

      section(data-camera="fullscreen")

      section
        h2 MQTT
        ul
          li publish/subscribe protocol
          li multiple quality of service level..
          li ..with at-least-once and exactly-once semantics
          li low overhead (2 bytes at minimum)
          li offline messaging
          li retained messages, like a key/value store

      section.full-imgs
        h2 Publish-Subscribe
        img(src="images/pubsub.png")

      section
        h2 Building Robots?

        ol
          li change the real world!
          li sense the real world!

      section(data-camera)
        h2 Controlling an LCD
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient();

            client.publish("yun/lcd", "Hello LXJS!");

            client.end();

      section(data-camera="fullscreen")

      section(data-camera)
        h2 Infrared Temperature Sensor
        p
          | Ambient: &nbsp;
          span#ir-ambient.sensor-data
          | &nbsp; °C
        p
          | Object: &nbsp;
          span#ir-object.sensor-data
          | &nbsp; °C

      section(data-camera)
        h2 Temperature on LCD?
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient();

            client.subscribe("sensortag/ir/ambient");

            client.on("message", function(topic, payload) {
              client.publish('yun/temp', payload);
            });

            setTimeout(client.end.bind(client), 3000);

      section(data-camera="fullscreen")

      section(data-camera)
        h2 Slide controls on LCD
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient();

            client.subscribe("deck/#");

            client.on("message", function(topic, payload) {
              client.publish('yun/' + topic, payload);
            });

            setTimeout(client.end.bind(client), 10000);

      section(data-camera="fullscreen")

      section(data-bespoke-state='sensortag', data-camera)
        h2 Slide control using MQTT
        ul.bullet
          li The SensorTag is connected via BLE to a node program
          li The button press events are published to topics 'deck/{next|prev}'
          li This web app is connected via WebSocket to the MQTT broker..
          li ..and triggers the sliding API.

      section(data-camera="fullscreen")

      section(data-camera)
        h2 Votes!
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient()
              , refs   = { red: -2, green: 2, yellow: 1 }
              , votes  = 0;
            client.subscribe("votes");
            client.on("message", function(topic, payload) {
              votes += refs[payload]
              client.publish("yun/votes", "" + votes)
              if (votes === 10)
                client.end()
            });

      section(data-camera="fullscreen")

      section#votes(data-camera)
        h2 Votes
        div(style="clear: both")
          i#votes-red
          i#votes-yellow
          i#votes-green

      section.full-imgs
        img(src='images/me.png')
        h3
          a(href='http://github.com/mcollina') http://github.com/mcollina

      section
        h1 Thanks!
        br
        p If you need help with the Internet of Things
        br
        h3 <a href="mailto:hello@matteocollina.com">hello@matteocollina.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a> on Twitter
        h3 <a href="http://www.matteocollina.com">www.matteocollina.com</a>

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-camera/dist/bespoke-camera.js')
    script(src='bower_components/bespoke-run/dist/bespoke-run.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='http://localhost:3000/mqtt.js')
    script(src='scripts/main.js')
    // endbuild
